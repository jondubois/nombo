var fork = require('child_process').fork;
var EventEmitter = require('events').EventEmitter;

var Uglifier = function (options) {
	var self = this;
	
	this._options = {
		mangle: true,
		timeout: 30000
	};
	
	for (var i in options) {
		this._options[i] = options[i];
	}
	
	this._launchUglifier();
};

Uglifier.prototype = Object.create(EventEmitter.prototype);

Uglifier.prototype._triggerError = function (err) {
	this.emit('error', err);
};

Uglifier.prototype._triggerNotice = function (err) {
	this.emit('notice', err);
};

Uglifier.prototype._launchUglifier = function () {
	var self = this;
	
	this._idSeed = 1;
	this._pendingTasks = {};
	this._uglifier = fork(__dirname + '/uglify-process.node.js');
	
	this._uglifier.on('error', function (err) {
		if (!(err instanceof Error)) {
			err = new Error(err);
		}
		for (var i in self._pendingTasks) {
			clearTimeout(self._pendingTasks[i].timeout);
			self._pendingTasks[i].callback(err);
			delete self._pendingTasks[i];
		}
		self._triggerError(err);
		self._uglifier.kill();
	});
	this._uglifier.on('exit', function () {
		for (var i in self._pendingTasks) {
			var err = new Error('Uglifier exited');
			clearTimeout(self._pendingTasks[i].timeout);
			self._pendingTasks[i].callback(err);
			delete self._pendingTasks[i];
		}
		self._launchUglifier();
	});
	
	this._uglifier.on('message', function (m) {
		if (m.type == 'result') {
			var id = m.id;
			if (self._pendingTasks[id]) {
				clearTimeout(self._pendingTasks[id].timeout);
				self._pendingTasks[id].callback(null, m.data);
				delete self._pendingTasks[id];
			}
		} else if (m.type == 'ack') {
			var id = m.id;
			if (self._pendingTasks[id]) {
				self._pendingTasks[id].timeout = setTimeout(function () {
					var err = new Error('The minification task timed out');
					self._pendingTasks[id].callback(err);
					delete self._pendingTasks[id];
					self._triggerNotice(err);
				}, self._options.timeout)
			}
		} else if (m.type == 'error') {
			var id = m.id;
			var err = m.data;
			if (!(err instanceof Error)) {
				err = new Error(err);
			}
			if (self._pendingTasks[id]) {
				clearTimeout(self._pendingTasks[id].timeout);
				self._pendingTasks[id].callback(err);
				delete self._pendingTasks[id];
			}
			self._triggerNotice(err);
		}
	});
	
	this._uglifier.send({
		type: 'init',
		data: this._options
	});
};

Uglifier.prototype._nextId = function () {
	return this._idSeed++;
};

Uglifier.prototype.minifyJS = function (content, callback) {
	var self = this;
	
	var id = this._nextId();
	this._pendingTasks[id] = {
		callback: callback
	};
	this._uglifier.send({
		type: 'minify',
		id: id,
		data: {
			type: 'javascript',
			content: content
		}
	});
};

Uglifier.prototype.minifyCSS = function (content, callback) {
	var self = this;
	
	var id = this._nextId();
	this._pendingTasks[id] = {
		callback: callback
	};
	this._uglifier.send({
		type: 'minify',
		id: id,
		data: {
			type: 'css',
			content: content
		}
	});
};


module.exports.Uglifier = Uglifier;