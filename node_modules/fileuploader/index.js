var fs = require('fs'),
	util = require('util'),
	crypto = require('crypto'),
	path = require('path'),
	Stream = require('stream').Stream,
	Buffer = require('buffer').Buffer,
	EventEmitter = require('events').EventEmitter,
	formidable = require('formidable');

var FileUploader = new (function() {
	var self = this;
	
	self._defaultTmpDir = __dirname + '/tmp';
	
	self.upload = function(req, tempDir) {
		if(tempDir) {
			self._tmpDir = tempDir;
		} else {
			self._tmpDir = self._defaultTmpDir;
		}
		
		var uploader = new EventEmitter();
		if(req.method == 'POST') {
			crypto.randomBytes(12, function(err, rand) {
				var fileRandPrefix = rand.toString('hex') + '_';
				if(req.headers['content-type'] == 'application/octet-stream') {
					var session = req.session;
					var fileName = req.headers['x-file-name'];
					var tempPath = path.normalize(self._tmpDir + '/' + fileRandPrefix + fileName);
					var bytesLoaded = 0;
					var bytesTotal = parseInt(req.headers['content-length']);
					
					var destStream = fs.createWriteStream(tempPath, {flags: 'w'});
					
					var progressHandler = function(chunk) {
						bytesLoaded += chunk.length;
						destStream.write(chunk);
						
						uploader.emit('uploadprogress', {bytesLoaded: bytesLoaded, bytesTotal: bytesTotal});
					}
					
					var errorHandler = function(err) {
						req.removeListener('error', errorHandler);
						req.removeListener('data', progressHandler);
						req.removeListener('end', finish);
						destStream.end();
						fs.unlink(tempPath);
						
						uploader.emit('uploadfail');
					}
					
					var finish = function() {
						req.removeListener('error', errorHandler);
						req.removeListener('data', progressHandler);
						req.removeListener('end', finish);
						destStream.end();
						
						uploader.emit('uploadcomplete', {path: tempPath, name: fileName});
					}
					
					req.on('data', progressHandler);
					req.on('error', errorHandler);
					req.on('end', finish);
					
				} else if(/^multipart\/form-data;/.test(req.headers['content-type'])) {
					var form = new formidable.IncomingForm();
					var finished = false;
					var error = false;
					
					form.on('progress', function(bytesReceived, bytesExpected) {
						uploader.emit('uploadprogress', {bytesLoaded: bytesReceived, bytesTotal: bytesExpected});
					});
					
					var setFinish = function() {
						finished = true;
					}
					
					var setError = function() {
						error = true;
					}
					
					form.on('end', setFinish);
					form.on('error', setError);
					
					var fail = function(tempPath) {
						finished = true;
						fs.unlink(tempPath);
						uploader.emit('uploadfail');
					}
					
					var finish = function(tempPath, fileName) {
						finished = true;
						uploader.emit('uploadcomplete', {path: tempPath, name: fileName});
					}
					
					form.on('fileBegin', function(name, file) {
						file.path = path.normalize(self._tmpDir + '/' + fileRandPrefix + file.name);
					});
					
					form.parse(req, function(err, fields, files) {
						var qqFile = files.qqfile;
						var fileName = qqFile.name;
						var tempPath = qqFile.path;
						var ended = false;
						
						var onFinish = function() {
							form.removeListener('end', onFinish);
							form.removeListener('error', onError);
							finish(tempPath, fileName);
						}
						
						var onError = function() {
							form.removeListener('end', onFinish);
							form.removeListener('error', onError);
							fail(tempPath);
						}
						
						form.removeListener('end', setFinish);
						form.removeListener('error', setError);
						if(finished) {
							finish(tempPath, fileName);
						} else if(error) {
							fail(tempPath);
						} else {
							form.on('end', onFinish);
							form.on('error', onError);
						}
					});
				} else {
					throw new Exception('Invalid Content-Type for upload operation');
				}
			});
		} else {
			throw new Exception('HTTP method for file upload must be POST');
		}
		return uploader;
	}
})();

module.exports = FileUploader;
