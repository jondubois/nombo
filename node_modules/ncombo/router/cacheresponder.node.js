var fs = require('fs');
var path = require('path');
var pathManager = require('ncombo/pathmanager');
var cache = require('ncombo/cache');

var CacheResponder = new (function() {
	var self = this;
	var unrefreshableRegex = /[.](js|css|less)$/;
	var unrefreshables = {};
	
	self.cacheMap = function(resourceCacheMap, neverRefresh) {
		var i;
		for(i in resourceCacheMap) {
			cache.set(cache.ENCODING_PLAIN, i, resourceCacheMap[i]);
		}
		
		if(neverRefresh) {
			for(i in resourceCacheMap) {
				unrefreshables[i] = true;
			}
		}
	}
	
	self.cache = function(index, content, neverRefresh) {
		cache.set(cache.ENCODING_PLAIN, index, content);
		if(neverRefresh) {
			unrefreshables[index] = true;
		}
	}
	
	self.uncache = function(index) {
		cache.clearMatches(new RegExp(cache.ENCODING_SEPARATOR + index + '$'));
		if(unrefreshables[index]) {
			delete unrefreshables[index];
		}
	}
	
	self.run = function(req, res, next) {
		var encoding = req.rout.encoding;
		var refreshable = !unrefreshables.hasOwnProperty(req.url) && (!unrefreshableRegex.test(req.url) || req.params.ck);
		if(req.params.ck && refreshable) {
			next();
		} else {
			if(cache.has(encoding, req.url)) {
				var headers = cache.getHeaders(encoding, req.url);
				var i;
				for(i in headers) {
					res.setHeader(i, headers[i]);
				}
				res.writeHead(200);
				res.end(cache.get(encoding, req.url));
			} else {
				if(encoding != cache.ENCODING_PLAIN) {
					if(cache.has(cache.ENCODING_PLAIN, req.url)) {
						req.rout.buffer = cache.get(cache.ENCODING_PLAIN, req.url);
					}
				}
				next();
			}
		}
	}
})();

module.exports = CacheResponder;
