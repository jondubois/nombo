var EventEmitter = require('events').EventEmitter;
var sio = require('socket.io');
var ndata = require('ndata');
var cluster = require('cluster');
var async = require('async');
var handlebars = require('handlebars');
var LinkedList = require('linkedlist');

var KeyManager = function (dataClient) {
	this._dataClient = dataClient;
};

KeyManager.prototype.generateKeyPath = function (keyChain) {
	var result = [];
	var i;
	
	if(keyChain instanceof Array) {
		for(i in keyChain) {
			result.push(this._dataClient.escape(keyChain[i]));
		}
	} else if(keyChain) {
		result.push(this._dataClient.escape(keyChain));
	}
	
	return result.join('.');
};

KeyManager.prototype.getGlobalDataKey = function (keys) {
	var keyChain = ['__iocl', 'gld'];
	if(keys) {
		keyChain = keyChain.concat(keys);
	}
	return this.generateKeyPath(keyChain);
};

KeyManager.prototype.getSessionDataKey = function (sessionId, keys) {
	var keyChain = ['__iocl', 'sed', sessionId];
	if(keys) {
		keyChain = keyChain.concat(keys);
	}
	return this.generateKeyPath(keyChain);
};

KeyManager.prototype.getSocketDataKey = function (socketId, keys) {
	var keyChain = ['__iocl', 'sod', socketId];
	if(keys) {
		keyChain = keyChain.concat(keys);
	}
	return this.generateKeyPath(keyChain);
};

KeyManager.prototype.getGlobalEventKey = function (key) {
	if(key == null) {
		return '__iocl.gle';
	} else {
		return '__iocl.gle.' + this._dataClient.escape(key);
	}
};

KeyManager.prototype.getSessionEventKey = function (sessionId, key) {
	if(key == null) {
		return '__iocl.see.' + this._dataClient.escape(sessionId);
	} else {
		return '__iocl.see.' + this._dataClient.escape(sessionId) + '.' + this._dataClient.escape(key);
	}
};

KeyManager.prototype.getSocketEventKey = function (socketId, key) {
	if(key == null) {
		return '__iocl.soe.' + this._dataClient.escape(socketId);
	} else {
		return '__iocl.soe.' + this._dataClient.escape(socketId) + '.' + this._dataClient.escape(key);
	}
};

var isEmpty = function(obj) {
	var i;
	for(i in obj) {
		return false;
	}
	return true;
};

var AbstractDataClient = function() {

};

AbstractDataClient.prototype.set = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.set.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.add = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.add.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.get = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.get.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.getRange = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.getRange.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.getAll = function(callback) {
	var clientRootKey = this._localizeDataKeys();
	this._dataClient.get.call(this._dataClient, clientRootKey, callback);
}

AbstractDataClient.prototype.count = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.count.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.remove = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.remove.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.removeRange = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.removeRange.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.removeAll = function(callback) {
	var clientRootKey = this._localizeDataKeys();
	this._dataClient.set.call(this._dataClient, clientRootKey, {}, callback);
}

AbstractDataClient.prototype.pop = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.pop.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.hasKey = function() {
	arguments[0] = this._localizeDataKeys(arguments[0]);
	this._dataClient.hasKey.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.stringify = function(value) {
	return this._dataClient.stringify(value);
}

AbstractDataClient.prototype.escape = function(value) {
	return this._dataClient.escape(value);
}

AbstractDataClient.prototype.input = function(value) {
	return this._dataClient.input(value);
}

AbstractDataClient.prototype.extractKeys = function(object) {
	return this._dataClient.extractKeys(object);
}

AbstractDataClient.prototype.extractValues = function(object) {
	return this._dataClient.extractValues(object);
}

AbstractDataClient.prototype.query = function(query, data) {
	var i;
	for(i in data) {
		data[i] = this.input(data[i]);
	}
	var queryTemplate = handlebars.compile(query, {noEscape: true});
	return queryTemplate(data);
}

AbstractDataClient.prototype.run = function(code, callback) {
	this._dataClient.run(code, this._namespace, callback);
}


var Global = function (dataClient, namespace) {
	this._dataClient = dataClient;
	this._keyManager = new KeyManager(dataClient);
	this._namespace = namespace ? namespace : '__main';
};

Global.prototype.__proto__ = AbstractDataClient.prototype;

Global.prototype._localizeDataKeys = function (keys) {
	return this._keyManager.getGlobalDataKey(keys);
}

Global.prototype.broadcast = function (event, data, callback) {
	this._dataClient.broadcast(this._keyManager.getGlobalEventKey(), {ns: this._namespace, event: event, data: data}, callback);
};

Global.prototype.emit = function (sessionId, event, data, callback) {
	this._dataClient.broadcast(this._keyManager.getSessionEventKey(sessionId), {ns: this._namespace, session: sessionId, event: event, data: data}, callback);
};

Global.prototype.ns = function (namespace) {
	return new Global(this._dataClient, namespace);
};


var Session = function (sessionId, dataClient, namespace) {
	this.id = sessionId;
	this._dataClient = dataClient;
	this._keyManager = new KeyManager(dataClient);
	this._namespace = namespace ? namespace : '__main';
};

Session.prototype.__proto__ = AbstractDataClient.prototype;

Session.prototype._localizeDataKeys = function (keys) {
	return this._keyManager.getSessionDataKey(this.id, keys);
}

Session.prototype.setAuth = function(data, callback) {
	this.set('__auth', data, callback);
}

Session.prototype.getAuth = function(callback) {
	this.get('__auth', callback);
}

Session.prototype.clearAuth = function(callback) {
	this.remove('__auth', callback);
}

Session.prototype.emit = function (event, data, callback) {
	this._dataClient.broadcast(this._keyManager.getSessionEventKey(this.id), {ns: this._namespace, session: this.id, event: event, data: data}, callback);
};

Session.prototype.countSockets = function (callback) {
	this._dataClient.count(this._keyManager.getSessionDataKey(this.id, ['__meta', 'sockets']), callback);
};

Session.prototype.destroy = function (callback) {
	this._dataClient.remove(this._keyManager.getSessionDataKey(this.id), callback);
};

Session.prototype.ns = function (namespace) {
	return new Session(this.id, this._dataClient, namespace);
};


var Socket = function (socketId, dataClient, namespace) {
	this.id = socketId;
	this._dataClient = dataClient;
	this._keyManager = new KeyManager(dataClient);
	this._namespace = namespace ? namespace : '__main';
};

Socket.prototype.__proto__ = AbstractDataClient.prototype;

Socket.prototype._localizeDataKeys = function (keys) {
	return this._keyManager.getSocketDataKey(this.id, keys);
}

Socket.prototype.emit = function (event, data, callback) {
	this._dataClient.broadcast(this._keyManager.getSocketEventKey(this.id), {ns: this._namespace, socket: this.id, event: event, data: data}, callback);
}

Socket.prototype.ns = function (namespace) {
	return new Socket(this.id, this._dataClient, namespace);
};


var IOClusterServer = module.exports.IOClusterServer = function (options) {
	var self = this;
	this._dataServer = ndata.createServer(options.port, options.secretKey);
	
	this._dataServer.on('ready', function() {
		self.emit('ready');
	});
};

IOClusterServer.prototype.__proto__ = EventEmitter.prototype;


var IOClusterClient = module.exports.IOClusterClient = function (options) {
	var self = this;
	
	this._dataClient = ndata.createClient(options.port, options.secretKey);
	this._dataExpiry = options.dataExpiry;
	this._expiryReset = Math.ceil(this._dataExpiry * .3);
	this._keyManager = new KeyManager(this._dataClient);
	this._expiryBatchSize = 1000;
	
	this._dataClient.on('ready', function () {
		self._dataClient.watchOnce(self._keyManager.getGlobalEventKey(), function () { self._handleGlobalEvent.apply(self, arguments); }, function(err) {
			if(err) {
				self.emit('fail', err);
			} else {
				self.emit('ready');
			}
		});
	});
	
	this._sockets = {};
	this._sessions = {};
	
	this._expiryInterval = setInterval(function () {
		self._extendExpiries();
	}, this._expiryReset);
};

IOClusterClient.prototype.__proto__ = EventEmitter.prototype;

IOClusterClient.prototype.destroy = function (callback) {
	clearInterval(this._expiryInterval);
	this._dataClient.removeAll(callback);
};

IOClusterClient.prototype._processExpiryList = function () {
	var self = this;
	var key;
	var keys = [];
	for(var i=0; i<this._expiryBatchSize; i++) {
		key = this._expiryList.shift();
		if(key) {
			keys.push(key);
		} else {
			break;
		}
	}
	if(keys.length > 0) {
		this._dataClient.expire(keys, this._dataExpiry, function() {
			self._processExpiryList();
		});
	}
};

IOClusterClient.prototype._extendExpiries = function () {
	this._expiryList = new LinkedList();
	var sockets = this._sockets;
	for (var i in sockets) {
		this._expiryList.push(sockets[i].socketDataKey);
		this._expiryList.push(sockets[i].sessionDataKey);
	}
	this._processExpiryList();
};

IOClusterClient.prototype.bind = function (socket, callback) {
	var self = this;
	
	socket.socketEventKey = this._keyManager.getSocketEventKey(socket.id);
	socket.sessionEventKey = this._keyManager.getSessionEventKey(socket.ssid);
	socket.socketDataKey = this._keyManager.getSocketDataKey(socket.id);
	socket.sessionDataKey = this._keyManager.getSessionDataKey(socket.ssid);
	
	this._sockets[socket.id] = socket;
	if(!this._sessions.hasOwnProperty(socket.ssid)) {
		this._sessions[socket.ssid] = {};
	}
	this._sessions[socket.ssid][socket.id] = socket;
	
	async.parallel([
		function (cb) {
			self._dataClient.watchOnce(socket.socketEventKey, function () { self._handleSocketEvent.apply(self, arguments); }, cb);
		},
		function (cb) {
			self._dataClient.watchOnce(socket.sessionEventKey, function () { self._handleSessionEvent.apply(self, arguments); }, cb);
		},
		function (cb) {
			self._dataClient.expire(socket.sessionDataKey, self._dataExpiry, cb);
		},
		function (cb) {
			self._dataClient.expire(socket.socketDataKey, self._dataExpiry, cb);
		},
		function (cb) {
			self._dataClient.set(self._keyManager.getSessionDataKey(socket.ssid, ['__meta', 'sockets', socket.id]), 1, cb);
		},
		function (cb) {
			self._dataClient.expire(self._keyManager.getGlobalDataKey(['__meta', 'addresses', socket.address]), self._dataExpiry, cb);
		},
		function (cb) {
			self._dataClient.set(self._keyManager.getGlobalDataKey(['__meta', 'addresses', socket.address, 'sockets', socket.id]), 1, cb);
		}
	],
	function(err) {
		callback && callback(err, socket);
	});
};

IOClusterClient.prototype.unbind = function (socket, callback) {
	var self = this;
	
	this._dataClient.unwatch(this._keyManager.getSocketEventKey(socket.id), null, function (err) {
		if(err) {
			callback(err);
		} else {
			delete self._sockets[socket.id];
			delete self._sessions[socket.ssid][socket.id];
			
			if(isEmpty(self._sessions[socket.ssid])) {
				delete self._sessions[socket.ssid];
				
				async.waterfall([
					function (cb) {
						self._dataClient.unwatch(self._keyManager.getSessionEventKey(socket.ssid), null, cb);
					},
					function (cb) {
						self._dataClient.remove(self._keyManager.getSocketDataKey(socket.id), cb);
					},
					function (cb) {
						self._dataClient.remove(self._keyManager.getSessionDataKey(socket.ssid, ['__meta', 'sockets', socket.id]), cb);
					},
					function (cb) {
						var session = self.session(socket.ssid);
						session.countSockets(function (err, value) {
							if(!err && value < 1) {
								session.destroy(function (err) {
									self.emit('sessiondestroy', socket.ssid);
									if(err) {
										cb(err);
									} else {
										self._dataClient.remove(self._keyManager.getGlobalDataKey(['__meta', 'addresses', socket.address]), cb);
									}
								});
							} else {
								cb(err);
							}
						});
					}
				], callback);
			}
		}
	});
};

IOClusterClient.prototype.getAddressSockets = function (ipAddress, callback) {
	self._dataClient.get(this._keyManager.getGlobalDataKey(['__meta', 'addresses', ipAddress]), function (err, data) {
		var sockets = [];
		var i;
		for(i in data) {
			sockets.push(i);
		}
		callback(err, sockets);
	});
};

IOClusterClient.prototype.global = function () {
	return new Global(this._dataClient);
};

IOClusterClient.prototype.session = function (sessionId) {
	return new Session(sessionId, this._dataClient);
};

IOClusterClient.prototype.socket = function (socketId) {
	return new Socket(socketId, this._dataClient);
};

IOClusterClient.prototype._handleSocketEvent = function (e) {
	var eventObject = {
		ns: e.ns,
		event: e.event,
		data: e.data
	};
	
	if(this._sockets.hasOwnProperty(e.socket)) {
		this._sockets[e.socket].emit('event', eventObject);
	}
};

IOClusterClient.prototype._handleSessionEvent = function (e) {
	var eventObject = {
		ns: e.ns,
		event: e.event,
		data: e.data
	};
	
	if(this._sessions.hasOwnProperty(e.session)) {
		var sockets = this._sessions[e.session];
		var i;
		for(i in sockets) {
			sockets[i].emit('event', eventObject);
		}
	}
};

IOClusterClient.prototype._handleGlobalEvent = function (e) {
	var i;
	var eventObject = {
		ns: e.ns,
		event: e.event,
		data: e.data
	};
	
	for(i in this._sockets) {
		this._sockets[i].emit('event', eventObject);
	}
};