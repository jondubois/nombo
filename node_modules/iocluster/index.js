var EventEmitter = require('events').EventEmitter;
var sio = require('socket.io');
var ndata = require('ndata');
var cluster = require('cluster');

var getGlobalDataKey = function (key) {
	if(key == null) {
		return '__iocl.gld';
	} else {
		return '__iocl.gld.' + key;
	}
};

var getSessionDataKey = function (sessionId, key) {
	if(key == null) {
		return '__iocl.sed' + sessionId;
	} else {
		return '__iocl.sed.' + sessionId + '.' + key;
	}
};

var getSocketDataKey = function (socketId, key) {
	if(key == null) {
		return '__iocl.sod.' + socketId;
	} else {
		return '__iocl.sed.' + socketId + '.' + key;
	}
};

var getGlobalEventKey = function (key) {
	if(key == null) {
		return '__iocl.gle';
	} else {
		return '__iocl.gle.' + key;
	}
};

var getSessionEventKey = function (sessionId, key) {
	if(key == null) {
		return '__iocl.see.' + sessionId;
	} else {
		return '__iocl.see.' + sessionId + '.' + key;
	}
};

var getSocketEventKey = function (socketId, key) {
	if(key == null) {
		return '__iocl.soe.' + socketId;
	} else {
		return '__iocl.soe.' + socketId + '.' + key;
	}
};

var isEmpty = function(obj) {
	var i;
	for(i in obj) {
		return false;
	}
	return true;
};

var AbstractDataClient = function() {

};

AbstractDataClient.prototype.set = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.set.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.add = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.add.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.get = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.get.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.getRange = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.getRange.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.getAll = function(callback) {
	var clientRootKey = this._localizeDataKey();
	this._dataClient.get.call(this._dataClient, clientRootKey, callback);
}

AbstractDataClient.prototype.count = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.count.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.remove = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.remove.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.removeRange = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.removeRange.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.removeAll = function(callback) {
	var clientRootKey = this._localizeDataKey();
	this._dataClient.set.call(this._dataClient, clientRootKey, {}, callback);
}

AbstractDataClient.prototype.pop = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.pop.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.hasKey = function() {
	arguments[0] = this._localizeDataKey(arguments[0]);
	this._dataClient.hasKey.apply(this._dataClient, arguments);
}

AbstractDataClient.prototype.stringify = function(value) {
	return this._dataClient.stringify(value);
}

AbstractDataClient.prototype.escape = function(value) {
	return this._dataClient.escape(value);
}

AbstractDataClient.prototype.input = function(value) {
	return this._dataClient.input(value);
}

AbstractDataClient.prototype.extractKeys = function(object) {
	return this._dataClient.extractKeys(object);
}

AbstractDataClient.prototype.extractValues = function(object) {
	return this._dataClient.extractValues(object);
}

/*
AbstractDataClient.prototype.query = function(query, data) {
	var i;
	for(i in data) {
		data[i] = this.input(data[i]);
	}
	var queryTemplate = handlebars.compile(query, {noEscape: true});
	return queryTemplate(data);
}
*/

AbstractDataClient.prototype.run = function(code, callback) {
	this._dataClient.run(code, this._namespace, callback);
}


var Global = function (dataClient) {
	this._dataClient = dataClient;
};

Global.prototype.__proto__ = AbstractDataClient.prototype;

Global.prototype._localizeDataKey = function (key) {
	return getGlobalDataKey(key);
}

Global.prototype.broadcast = function (event, data, callback) {
	this._dataClient.broadcast(getGlobalEventKey(), {event: event, data: data}, callback);
};

Global.prototype.emit = function (sessionId, event, data, callback) {
	this._dataClient.broadcast(getSessionEventKey(sessionId), {session: sessionId, event: event, data: data}, callback);
};


var Session = function (sessionId, dataClient) {
	this.id = sessionId;
	this._dataClient = dataClient;
};

Session.prototype.__proto__ = AbstractDataClient.prototype;

Session.prototype._localizeDataKey = function (key) {
	return getSessionDataKey(key);
}

Session.prototype.setAuth = function(data, callback) {
	this.set('__auth', data, callback);
}

Session.prototype.getAuth = function(callback) {
	this.get('__auth', callback);
}

Session.prototype.clearAuth = function(callback) {
	this.remove('__auth', callback);
}

Session.prototype.emit = function (event, data, callback) {
	this._dataClient.broadcast(getSessionEventKey(this.id), {session: this.id, event: event, data: data}, callback);
};


var Socket = function (socketId, dataClient) {
	this.id = socketId;
	this._dataClient = dataClient;
};

Socket.prototype.__proto__ = AbstractDataClient.prototype;

Socket.prototype._localizeDataKey = function (key) {
	return getSocketDataKey(key);
}

Socket.prototype.emit = function (event, data, callback) {
	this._dataClient.broadcast(getSocketEventKey(this.id), {socket: this.id, event: event, data: data}, callback);
}


var IOCluster = module.exports.IOCluster = function (options) {
	var self = this;
	this.GLOBAL = 'global';
	this.SESSION = 'session';
	this.SOCKET = 'socket';

	if(cluster.isMaster && !options.nDataUseExistingServer) {
		this._nDataServer = ndata.createServer(options.nDataPort, options.nDataSecretKey);
	}
	
	if(options.nDataClient) {
		this._dataClient = options.nDataClient;
	} else {
		this._dataClient = ndata.createClient(options.nDataPort, options.nDataSecretKey);
	}
	
	this._dataClient.watchOnce(getGlobalEventKey(), function () { self._handleGlobalEvent.apply(self, arguments); });
	this._sockets = {};
	this._sessions = {};
};

// TODO: Use async parallel for callback
IOCluster.prototype.bind = function (socket, callback) {
	var self = this;
	this._sockets[socket.id] = socket;
	if(!this._sessions.hasOwnProperty(socket.ssid)) {
		this._sessions[socket.ssid] = {};
	}
	this._sessions[socket.ssid][socket.id] = socket;
	
	this._dataClient.watchOnce(getSocketEventKey(socket.id), function () { self._handleSocketEvent.apply(self, arguments); });
	this._dataClient.watchOnce(getSessionEventKey(socket.ssid), function () { self._handleSessionEvent.apply(self, arguments); });
	
	this._dataClient.set('__iocl.sessions.' + this._dataClient.escape(socket.ssid) + '.' + this._dataClient.escape(socket.id), 1, function (err) {
		callback && callback(err, socket)
	});
};

// TODO: Use async parallel for callback
IOCluster.prototype.unbind = function (socket, callback) {
	var self = this;
	
	delete this._sockets[socket.id];
	delete this._sessions[socket.ssid][socket.id];
	
	this._dataClient.unwatch(getSocketEventKey(socket.id));
	
	if(isEmpty(this._sessions[socket.ssid])) {
		delete this._sessions[socket.ssid];
		self._dataClient.unwatch(getSessionEventKey(socket.ssid));
		
	}
	
	// TODO: remove socket from session before checking this
	
	this._dataClient.count('__iocl.sessions.' + this._dataClient.escape(socket.ssid), function(err, value) {
		if(!err && value < 2) {
			self._dataClient.remove('__iocl.sessions.' + self._dataClient.escape(socket.ssid));
		}
		callback && callback(err);
	});
};

IOCluster.prototype.global = function () {
	return new Global(this._dataClient);
};

IOCluster.prototype.session = function (sessionId) {
	return new Session(sessionId, this._dataClient);
};

IOCluster.prototype.socket = function (socketId) {
	return new Socket(socketId, this._dataClient);
};

IOCluster.prototype._handleSocketEvent = function (e) {
	var eventObject = {
		ns: '__main',
		event: e.event,
		data: e.data
	};
	
	if(this._sockets.hasOwnProperty(e.socket)) {
		this._sockets[e.socket].emit('event', eventObject);
	}
};

IOCluster.prototype._handleSessionEvent = function (e) {
	var eventObject = {
		ns: '__main',
		event: e.event,
		data: e.data
	};
	
	if(this._sessions.hasOwnProperty(e.session)) {
		var sockets = this._sessions[e.session];
		var i;
		for(i in sockets) {
			sockets[i].emit('event', eventObject);
		}
	}
};

IOCluster.prototype._handleGlobalEvent = function (e) {
	var i;
	var eventObject = {
		ns: '__main',
		event: e.event,
		data: e.data
	};
	
	for(i in this._sockets) {
		this._sockets[i].emit('event', eventObject);
	}
};