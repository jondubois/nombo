var http = require('http');
var httpProxy = require('http-proxy');
var url = require('url');

var LoadBalancer = function (options) {
	var self = this;

	this.protocol = options.protocol || 'http';
	this.protocolOptions = options.protocolOptions;
	this.sourcePort = options.sourcePort;
	this.destPorts = options.destPorts;
	this._destRegex = /^([^_]*)_([^_]*)_/;
	this._sidRegex = /([^A-Za-z0-9]|^)s?sid=([^;]*)/;
	
	var proxyHTTP = function (req, res, proxy) {
		var dest = self._getDest(req);
		proxy.proxyRequest(req, res, dest);
	};

	var proxyWebSocket = function (req, socket, head) {
		var dest = self._getDest(req);
		self.server.proxy.proxyWebSocketRequest(req, socket, head, dest);
	};
	
	httpProxy.setMaxSockets(Infinity);
	
	this.server = httpProxy.createServer(proxyHTTP);
	this.server.on('upgrade', proxyWebSocket);
	
	this.server.listen(this.sourcePort)
};

LoadBalancer.prototype.setDestPorts = function (ports) {
	this.destPorts = ports;
};

LoadBalancer.prototype._parseDest = function (req) {
	var query = url.parse(req.url).query;
	
	if (!query) {
		return null;
	}
	
	var matches = query.match(this._sidRegex);
	
	if (!matches) {
		return null;
	}
	
	var routString = matches[2];
	var result = routString.match(this._destRegex);
	
	if (!result) {
		return null;
	}
	
	var dest = {
		host: result[1] || 'localhost',
		port: parseInt(result[2]) || this._randomPort()
	};
	
	return dest;
};

LoadBalancer.prototype._randomPort = function() {
	var rand = Math.floor(Math.random() * this.destPorts.length);
	return this.destPorts[rand];
};

LoadBalancer.prototype._getDest = function(req) {
	var dest = this._parseDest(req);
	
	if (!dest) {
		dest = {
			host: 'localhost',
			port: this._randomPort()
		};
	}
	return dest;
};

module.exports = LoadBalancer;