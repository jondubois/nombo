var fs = require('fs'),
	path = require('path'),
	json = require('json');
	
var existsSync = fs.existsSync || path.existsSync;

var ConfigManager = new (function() {
	var self = this;
	self._configs = {};
	
	self.parseConfig = function(filePath, nocache) {
		filePath = path.resolve(filePath);
		if(nocache || !self._configs.hasOwnProperty(filePath)) {
			if(existsSync(filePath)) {
				var configJSON = fs.readFileSync(filePath, 'utf8');
				try {
					self._configs[filePath] = json.parse(configJSON);
				} catch(e) {
					throw "Exception: Syntax error in config file " + filePath + ": " + e;
				}
			} else {
				self._configs[filePath] = {};
			}
		}
		return self._configs[filePath];
	}
	
	self.parseConfigTree = function(startingDir, inheritConfig, defaultConfig, configFileName) {
		if(!startingDir) {
			startingDir = '/';
		}
		if(!defaultConfig) {
			defaultConfig = {};
		} else if(typeof defaultConfig == 'string') {
			defaultConfig = self.parseConfig(defaultConfig);
		}
		if(typeof inheritConfig == 'string') {
			inheritConfig = self.parseConfig(inheritConfig);
		}
		
		var confs = {};
		var dirPath = startingDir;
		
		var i, j, subDir, stat, conf, curConf, subConfigs;
		
		try {
			conf = {};
			curConf = self.parseConfig(startingDir + configFileName);
			
			for(j in inheritConfig) {
				conf[j] = inheritConfig[j];
			}
			
			for(j in curConf) {
				if(curConf[j] == 'default') {
					conf[j] = defaultConfig[j];
				} else {
					conf[j] = curConf[j];
				}
			}
			
			confs[startingDir] = conf;
		} catch(e) {
			
		}
		
		if(!curConf) {
			if(inheritConfig) {
				curConf = inheritConfig;
			} else {
				curConf = defaultConfig;
			}
		}
		
		var subs = fs.readdirSync(startingDir);
		var len = subs.length;
		
		for(i=0; i<len; i++) {
			subDir = startingDir + subs[i];
			
			if(fs.statSync(subDir).isDirectory()) {
				subDir += '/';
				subConfigs = self.parseConfigTree(subDir, curConf, defaultConfig, configFileName);
				
				for(j in subConfigs) {
					confs[j] = subConfigs[j];
				}
			}
		}
		
		return confs;
	}
})();

module.exports = ConfigManager;
