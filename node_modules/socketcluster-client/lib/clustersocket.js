/**
 * Module dependencies.
 */

var util = require('./util');
var Emitter = require('./emitter');
var Socket = require('./socket');

/**
 * Module exports.
 */
 
 if (!Object.create) {
	Object.create = (function () {
		function F() {};

		return function (o) {
			if (arguments.length != 1) {
				throw new Error('Object.create implementation only accepts one parameter.');
			}
			F.prototype = o;
			return new F();
		}
	})();
}

var ClusterSocket = function (uri, options, namespace) {
	options = options || {};
	Socket.call(this, uri, options);
	
	if (typeof uri == 'object') {
		options = uri;
		uri = null;
	}
	
	this._internalEvents = {
		'upgrading': 1,
		'upgrade': 1,
		'error': 1,
		'open': 1,
		'packet': 1,
		'heartbeat': 1,
		'data': 1,
		'message': 1,
		'handshake': 1,
		'drain': 1,
		'flush': 1,
		'packetCreate': 1,
		'close': 1
	};
	
	var self = this;
	this.options = options;
	this.uri = uri;
	this.namespace = namespace || '__';
	
	Socket.prototype.on.call(this, 'message', function (message) {
		var e = self.JSON.parse(message);
		var eventName = e.ns + '.' + e.event;
		Emitter.prototype.emit.call(self, eventName, e.data);
	});
};

ClusterSocket.prototype = Object.create(Socket.prototype);

ClusterSocket.prototype.ns = function (namespace) {
	return new ClusterSocket(this.uri, this.options, namespace);
};

ClusterSocket.prototype.emit = function (event, data) {
	if (this._internalEvents[event] == null) {
		var eventObject = {
			ns: this.namespace,
			event: event
		};
		if (data !== undefined) {
			eventObject.data = data;
		}
		Socket.prototype.send.call(this, this.JSON.stringify(eventObject));
	} else {
		Emitter.prototype.emit.apply(this, arguments);
	}
};

ClusterSocket.prototype.on = function (event, listener) {
	if (this._internalEvents[event] == null) {
		var eventName = this.namespace + '.' + event;
		Emitter.prototype.on.call(this, eventName, listener);
	} else {
		Emitter.prototype.on.apply(this, arguments);
	}
};

ClusterSocket.JSON = ClusterSocket.prototype.JSON = require('./json').JSON;

module.exports = ClusterSocket;