var engine = require('engine.io');
var Server = engine.Server;
var ClusterSocket = require('./clustersocket');
var transports = engine.transports;
var EventEmitter = require('events').EventEmitter;
var base64id = require('base64id');

module.exports = ClusterServer;

function ClusterServer(options) {
	Server.call(this, options);
	
	this._ioClusterClient = options.ioClusterClient;
	this._sessionIdRegex = /(__.*\/ncssid=)([^;]*)/;
};

ClusterServer.prototype = Object.create(Server.prototype);

ClusterServer.prototype._parseSessionId = function (cookieString) {
	if(typeof cookieString == 'string') {
		var result = cookieString.match(this._sessionIdRegex);
		if(result) {
			return result[2];
		}
	}
	return null;
};

ClusterServer.prototype.on = function (event, listener) {
	if (event == 'ready') {
		this._ioClusterClient.on(event, listener);
	} else {
		Server.prototype.on.apply(this, arguments);
	}
};

ClusterServer.prototype.removeListener = function (event, listener) {
	if (event == 'ready') {
		this._ioClusterClient.removeListener(event, listener);
	} else {
		Server.prototype.removeListener.apply(this, arguments);
	}
};

ClusterServer.prototype.sendErrorMessage = function (res, code) {
	res.writeHead(400, {'Content-Type': 'application/json'});
	res.end(JSON.stringify({
		code: code,
		message: Server.errorMessages[code]
	}));
};

ClusterServer.prototype.generateId = function () {
	return ':' + process.pid + ':' + base64id.generateId();
};

ClusterServer.prototype.handshake = function (transport, req) {
	var self = this;
	var id = this.generateId();
	try {
		var transport = new transports[transport](req);
	} catch (e) {
		this.sendErrorMessage(req.res, Server.errors.BAD_REQUEST);
		return;
	}
	
	var socket = new ClusterSocket(id, this, transport);

	if (false !== this.cookie) {
		transport.on('headers', function (headers) {
			headers['Set-Cookie'] = self.cookie + '=' + id;
		});
	}

	transport.onRequest(req);

	this.clients[id] = socket;
	this.clientsCount++;
	
	var headers = req.headers || {};
	
	if (req.connection) {
		socket.address = req.connection.remoteAddress;
	}
	var ssid = this._parseSessionId(headers.cookie);
	socket.ssid = ssid || socket.id;
	socket.session = this._ioClusterClient.session(socket.ssid);
	socket.global = this._ioClusterClient.global();
	
	this._ioClusterClient.bind(socket, function (err) {
		if (err) {
			self.emit('error', 'Failed to bind socket to io cluster');
		} else {
			self.emit('connection', socket);
		}
	});
	
	socket.once('close', function () {
		self._ioClusterClient.unbind(socket, function(err) {
			if (err) {
				self.emit('error', 'Failed to unbind socket from io cluster');
			} else {
				delete self.clients[id];
				self.clientsCount--;
				self.emit('close', 'Socket was disconnected');
			}
		});
	});
};