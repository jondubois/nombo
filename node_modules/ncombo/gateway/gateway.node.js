var path = require('path'),
	fs = require('fs'),
	async = require('async'),
	io = require('socket.io-client'),
	wrench = require('wrench'),
	EventEmitter = require('events').EventEmitter;

var Gateway = function() {
	var self = this;
	self._siDir = null;
	self._serverInterfaces = {};
	self._privateExtension = [];
	self._privateExtensionRegex = /$a/;
	self._allowedMap = {'*': true};
	self._releaseMode = false;
	
	var publicExt = /(.*)[.]js$/;
	
	self.getSiName = function(siPath) {
		return path.relative(self._siDir, siPath).replace(/\\/g, '/').replace(self._privateExtensionRegex, '').replace(/[.]js$/, '');
	}
	
	self.init = function(serverInterfaceDir, customSIMExtension) {
		self._siDir = path.normalize(serverInterfaceDir);
		
		if(customSIMExtension) {
			self._privateExtension = customSIMExtension;
			self._privateExtensionRegex = new RegExp('[.](' + self._privateExtension.replace(/[.]/g, '[.]') + ')$');
		}
		
		var files = wrench.readdirSyncRecursive(self._siDir);
		var serverInterfaceFiles = fs.readdirSync(self._siDir);
		var i, file, siName, match;
		var privateExt = new RegExp('(.*)(' + self._privateExtensionRegex.source + ')');
		var backslashes = /\\/g;
		var siPath;
		for(i in files) {
			file = files[i];
			match = file.match(privateExt);
			if(match) {
				siName = match[1].replace(backslashes, '/');
				if(!self._serverInterfaces.hasOwnProperty(siName)) {
					siPath = self._siDir + file;
					self._serverInterfaces[siName] = require(siPath);
				}
			} else {
				match = file.match(publicExt);
				if(match) {
					siName = match[1].replace(backslashes, '/');
					if(!self._serverInterfaces.hasOwnProperty(siName)) {
						siPath = self._siDir + file;
						self._serverInterfaces[siName] = require(siPath);
					}
				}
			}
		}
	}
	
	self.setReleaseMode = function(bool) {
		self._releaseMode = bool;
	}
	
	self.exec = function(ioReq, ioRes) {
		var serverInterface = ioReq.sim;
		var method = ioReq.method;
		self._serverInterfaces[serverInterface][method](ioReq, ioRes);
	}
}

Gateway.prototype.__proto__ = EventEmitter.prototype;

module.exports = new Gateway();
