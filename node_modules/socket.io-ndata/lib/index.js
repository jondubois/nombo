var Store = require('./store');
var ndata = require('ndata');
var cluster = require('cluster');

exports = module.exports = nData;
nData.Client = Client;

function nData (opts) {
	opts = opts || {};
	
	var nodeId = opts.nodeId || function () {
		return Math.abs(Math.random() * Date.now() | 0);
	};
	this.nodeId = nodeId();
	
	if(cluster.isMaster && !opts.useExistingServer) {
		this._dataServer = ndata.createServer(opts.port, opts.secretKey);
	}
	
	if(opts.client) {
		this._dataClient = opts.client;
	} else {
		this._dataClient = ndata.createClient(opts.port, opts.secretKey);
	}
	Store.call(this, opts);
	this.setMaxListeners(0);
};

nData.prototype.__proto__ = Store.prototype;

nData.prototype.publish = function (name, id, args, fn) {
	var args = Array.prototype.slice.call(arguments, 1);
	this._dataClient.broadcast('__store.events.' + name, {nodeId: this.nodeId, args: args}, fn);
	this.emit.apply(this, ['publish', name].concat(args));
};

nData.prototype.subscribe = function (name, consumer, fn) {
	var self = this;
	
	self._dataClient.watchOnce('__store.events.' + name, function (data) {
		if (consumer && self.nodeId != data.nodeId) {
			try {
				consumer.apply(null, data.args);
			} catch (e) {
				
			}
		}
	}, fn);

	self.emit('subscribe', name, consumer, fn);
};

nData.prototype.unsubscribe = function (name, fn) {
	this._dataClient.unwatch('__store.events.' + name, null, fn);
	this.emit('unsubscribe', name, fn);
};

nData.prototype.destroy = function (fn) {
	Store.prototype.destroy.call(this);
};

function Client(store, id) {
	Store.Client.call(this, store, id);
};

Client.prototype.__proto__ = Store.Client;

Client.prototype._getFullKey = function(id, key) {
	return key ? '__store.client.' + id + '.' + key : '__store.client.' + id;
}

Client.prototype.get = function (key, fn) {
	var fullKey = this._getFullKey(this.id, key);
	this.store._dataClient.get(fullKey, fn);
	return this;
};

Client.prototype.set = function (key, value, fn) {
	var fullKey = this._getFullKey(this.id, key);
	this.store._dataClient.set(fullKey, value, fn);
	return this;
};

Client.prototype.del = function (key, fn) {
	var fullKey = this._getFullKey(this.id, key);
	this.store._dataClient.remove(fullKey, fn);
	return this;
};

Client.prototype.has = function (key, fn) {
	var fullKey = this._getFullKey(this.id, key);
	this.store._dataClient.hasKey(fullKey, fn);
	return this;
};

Client.prototype.destroy = function (expiration) {
	var self = this;
	var cleanup = function() {
		self.store._dataClient.remove(self._getFullKey(self.id));
	};
	
	if(typeof expiration == 'number') {
		setTimeout(cleanup, expiration);
	} else {
		cleanup();
	}
	return this;
};
