var socketCluster = require('socketcluster-client');
var path = require('path');
var EventEmitter = require('events').EventEmitter;

var RemoteInterface = function (url, namespace, wsSocket) {
	var self = this;
	var mainNamespace = '__';
	var simNamespace = '__nc';
	
	if (!wsSocket) {
		wsSocket = socketCluster.connect(url);
	}
	
	var mainSocket = wsSocket.ns(mainNamespace);
	var simSocket = wsSocket.ns(simNamespace);
	
	self.namespace = namespace || mainNamespace;
	
	self.ns = function (namespace) {
		return new RemoteInterface(url, namespace, wsSocket);
	};
	
	self.exec = function () {
		var serverInterface = arguments[0];
		var method = arguments[1];
		var callback = null;
		
		var request = {
			sim: serverInterface,
			method: method
		};
		
		if (arguments[3]) {
			request.data = arguments[2];
			callback = arguments[3];
		} else if (arguments[2] !== undefined) {
			if (arguments[2] instanceof Function) {
				callback = arguments[2];
			} else {
				request.data = arguments[2];
			}
		}
		
		simSocket.emit('rpc', request, callback);
	};
	
	self.watch = function (event, handler) {
		mainSocket.on(event, handler);
	};
	
	self.watchOnce = function (event, handler) {
		mainSocket.once(event, handler);
	};
	
	self.unwatch = function (event, handler) {
		if (event && handler) {
			mainSocket.removeListener(event, handler);
		} else {
			mainSocket.removeAllListeners(event);
		}
	};
	
	self.watchers = function (event) {
		mainSocket.listeners(event);
	};
}

var WebService = function () {
	this._webServiceMap = {};
};

WebService.prototype._asURL = function (host, port, secure) {
	return (secure ? 'https://' : 'http://') + host + ":" + port;
};

WebService.prototype.getClient = function (host, port, secure) {
	var url = this._asURL(host, port, secure);
	
	if(!this._webServiceMap.hasOwnProperty(url)) {
		this._webServiceMap[url] = new RemoteInterface(url);
	}
	
	return this._webServiceMap[url];
};

WebService.prototype.destroyClient = function (host, port, secure) {
	var url = this._asURL(host, port, secure);
	delete this._webServiceMap[url];
};

module.exports = new WebService();