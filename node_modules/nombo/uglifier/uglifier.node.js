var fork = require('child_process').fork;
var EventEmitter = require('events').EventEmitter;

var Uglifier = function (options) {
	var self = this;
	
	this._options = {
		mangle: true,
		timeout: 120000
	};
	
	for (var i in options) {
		this._options[i] = options[i];
	}
	
	this._minifierPath = __dirname + '/uglify-process.node.js';
	this._pendingTasks = {};
};

Uglifier.prototype = Object.create(EventEmitter.prototype);

Uglifier.prototype._triggerError = function (err) {
	this.emit('error', err);
};

Uglifier.prototype._triggerNotice = function (err) {
	this.emit('notice', err);
};

Uglifier.prototype._minify = function (options, callback) {
	var self = this;
	var url = options.url;
	
	if (this._pendingTasks[url]) {
		this._pendingTasks[url].stale = true;
		this._pendingTasks[url].kill();
	}
	
	this._pendingTasks[url] = fork(this._minifierPath);
	var minifyProcess = this._pendingTasks[url];
	var minifyTimeout = null;
	var result = {};
	minifyProcess.on('exit', function () {
		clearTimeout(minifyTimeout);
		if (result.notice) {
			self._triggerNotice(result.notice);
		} else if (result.error) {
			self._triggerError(result.error);
		}
		
		if (self._pendingTasks[url] == minifyProcess) {
			delete self._pendingTasks[url];
		}
		callback(result.error, result.data, !minifyProcess.stale);
	});

	if (!options.noTimeout) {
		minifyTimeout = setTimeout(function () {
			result.notice = new Error('Minification timed out: ' + url);
			minifyProcess.stale = true;
			minifyProcess.kill();
		}, this._options.timeout);
	}
	
	minifyProcess.on('error', function (err) {
		if (!(err instanceof Error)) {
			err = new Error(err);
		}
		result.error = err;
		if (!minifyProcess.stale) {
			minifyProcess.kill();
		}
	});
	
	minifyProcess.on('message', function (m) {
		if (m.type == 'result') {
			result.data = m.data;
			if (!minifyProcess.stale) {
				minifyProcess.kill();
			}
		} else if (m.type == 'error') {
			var err = m.data;
			if (!(err instanceof Error)) {
				err = new Error(err);
			}
			result.notice = err;
			if (!minifyProcess.stale) {
				minifyProcess.kill();
			}
		}
	});
	
	minifyProcess.send({
		type: 'minify',
		data: {
			type: options.type,
			mangle: this._options.mangle,
			content: options.content			
		}
	});
};

Uglifier.prototype.minifyJS = function (options, callback) {
	var minifyOptions = {};
	for (var i in options) {
		minifyOptions[i] = options[i];
	}
	minifyOptions.type = 'javascript';
	
	this._minify(minifyOptions, callback);
};

Uglifier.prototype.minifyCSS = function (options, callback) {
	var minifyOptions = {};
	for (var i in options) {
		minifyOptions[i] = options[i];
	}
	minifyOptions.type = 'css';
	
	this._minify(minifyOptions, callback);
};

module.exports.Uglifier = Uglifier;