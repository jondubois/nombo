var fork = require('child_process').fork;

var Uglifier = function (options) {
	var self = this;
	
	this._options = {
		mangle: true,
		timeout: 30000
	};
	
	for (var i in options) {
		this._options[i] = options[i];
	}
	
	this._idSeed = 1;
	this._pendingTasks = {};
	this._uglifier = fork(__dirname + '/uglify-process.node.js');
	
	this._uglifier.on('message', function (m) {
		if (m.type == 'result') {
			var id = m.id;
			if (self._pendingTasks[id]) {
				clearTimeout(self._pendingTasks[id].timeout);
				self._pendingTasks[id].callback(null, m.data);
				delete self._pendingTasks[id];
			}
		}
	});
	
	this._uglifier.send({
		type: 'init',
		data: this._options
	});
};

Uglifier.prototype._nextId = function () {
	return this._idSeed++;
};

Uglifier.prototype.minify = function (code, callback) {
	var self = this;
	
	var id = this._nextId();
	this._pendingTasks[id] = {
		callback: callback,
		timeout: setTimeout(function () {
			callback(new Error('The minification task timed out'));
			delete self._pendingTasks[id];
		}, this._options.timeout);
	};
	this._uglifier.send({
		type: 'minify',
		id: id,
		data: code
	});
};

module.exports.Uglifier = Uglifier;