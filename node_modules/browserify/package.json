{
  "name": "browserify",
  "version": "1.17.3",
  "description": "browser-side require() the node way",
  "main": "index.js",
  "bin": {
    "browserify": "bin/cmd.js"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-browserify.git"
  },
  "keywords": [
    "browser",
    "require",
    "middleware",
    "bundle",
    "npm",
    "coffee",
    "javascript"
  ],
  "dependencies": {
    "detective": "~0.2.0",
    "buffer-browserify": "~0.0.1",
    "console-browserify": "~0.1.0",
    "deputy": "~0.0.3",
    "syntax-error": "~0.0.0",
    "resolve": "~0.2.0",
    "nub": "~0.0.0",
    "commondir": "~0.0.1",
    "coffee-script": "1.x.x",
    "optimist": "~0.3.4",
    "http-browserify": "~0.1.1",
    "vm-browserify": "~0.0.0",
    "crypto-browserify": "~0"
  },
  "devDependencies": {
    "tap": "~0.2.5",
    "connect": "1.8.5",
    "hashish": ">=0.0.2 <0.1",
    "traverse": ">=0.3.8 <0.4",
    "backbone": "~0.9.2",
    "dnode": "~0.9.11",
    "jade": "0.20.0",
    "seq": "0.3.3",
    "jquery-browserify": "*",
    "lazy": "1.0.x",
    "ecstatic": "~0.1.4",
    "mkdirp": "~0.3.3"
  },
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "scripts": {
    "test": "node node_modules/tap/bin/tap.js test/*.js"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.6.0"
  },
  "readme": "browserify\n==========\n\nMake node-style require() work in the browser with a server-side build step,\nas if by magic!\n\n[![build status](https://secure.travis-ci.org/substack/node-browserify.png)](http://travis-ci.org/substack/node-browserify)\n\n![browserify!](http://substack.net/images/browserify/browserify.png)\n\nexample\n=======\n\nJust write an `entry.js` to start with some `require()`s in it:\n\n````javascript\n// use relative requires\nvar foo = require('./foo');\nvar bar = require('../lib/bar');\n\n// or use modules installed by npm into node_modules/\nvar gamma = require('gamma');\n\nvar elem = document.getElementById('result');\nvar x = foo(100) + bar('baz');\nelem.textContent = gamma(x);\n````\n\nNow just use the `browserify` command to build a bundle starting at `entry.js`:\n\n```\n$ browserify entry.js -o bundle.js\n```\n\nAll of the modules that `entry.js` needs are included in the final bundle from a\nrecursive walk using [detective](https://github.com/substack/node-detective).\n\nTo use the bundle, just toss a `<script src=\"bundle.js\"></script>` into your\nhtml!\n\nusage\n=====\n\n````\nUsage: browserify [entry files] {OPTIONS}\n\nOptions:\n  --outfile, -o  Write the browserify bundle to this file.\n                 If unspecified, browserify prints to stdout.                   \n  --require, -r  A module name or file to bundle.require()\n                 Optionally use a colon separator to set the target.            \n  --entry, -e    An entry point of your app                                     \n  --exports      Export these core objects, comma-separated list\n                 with any of: require, process. If unspecified, the\n                 export behavior will be inferred.\n                                                                                \n  --ignore, -i   Ignore a file                                                  \n  --alias, -a    Register an alias with a colon separator: \"to:from\"\n                 Example: --alias 'jquery:jquery-browserify'                    \n  --cache, -c    Turn on caching at $HOME/.config/browserling/cache.json or use\n                 a file for caching.\n                                                                 [default: true]\n  --debug, -d    Switch on debugging mode with //@ sourceURL=...s.     [boolean]\n  --plugin, -p   Use a plugin.\n                 Example: --plugin aliasify                                     \n  --prelude      Include the code that defines require() in this bundle.\n                                                      [boolean]  [default: true]\n  --watch, -w    Watch for changes. The script will stay open and write updates\n                 to the output every time any of the bundled files change.\n                 This option only works in tandem with -o.                      \n  --verbose, -v  Write out how many bytes were written in -o mode. This is\n                 especially useful with --watch.                                \n  --help, -h     Show this message                                              \n\n````\n\ncompatibility\n=============\n\nMany [npm](http://npmjs.org) modules that don't do IO will just work after being\nbrowserified. Others take more work.\n\n[coffee script](http://coffeescript.org/) should pretty much just work.\nJust do `browserify entry.coffee` or `require('./foo.coffee')`.\n\nMany node built-in modules have been wrapped to work in the browser.\nAll you need to do is `require()` them like in node.\n\n* events\n* path\n* [vm](https://github.com/substack/vm-browserify)\n* [http](https://github.com/substack/http-browserify)\n* [crypto](https://github.com/dominictarr/crypto-browserify)\n* assert\n* url\n* buffer\n* buffer_ieee754\n* util\n* querystring\n* stream\n\nprocess\n-------\n\nBrowserify makes available a faux `process` object to modules with these\nattributes:\n\n* nextTick(fn) - uses [the postMessage trick](http://dbaron.org/log/20100309-faster-timeouts)\n    for a faster `setTimeout(fn, 0)` if it can\n* title - set to 'browser' for browser code, 'node' in regular node code\n* browser - `true`, good for testing if you're in a browser or in node\n\nBy default the process object is only available inside of files wrapped by\nbrowserify. To expose it, use `--exports=process`\n\n__dirname\n---------\n\nThe faux directory name, scrubbed of true directory information so as not to\nexpose your filesystem organization.\n\n__filename\n----------\n\nThe faux file path, scrubbed of true path information so as not to expose your\nfilesystem organization.\n\npackage.json\n============\n\nIn order to resolve main files for projects, the package.json \"main\" field is\nread.\n\nIf a package.json has a \"browserify\" field, you can override the standard \"main\"\nbehavior with something special just for browsers.\n\nSee [dnode's\npackage.json](https://github.com/substack/dnode/blob/9e24b97cf2ce931fbf6d7beb3731086b46bca887/package.json#L40)\nfor an example of using the \"browserify\" field.\n\nmore\n====\n\n* [browserify recipes](https://github.com/substack/node-browserify/blob/master/doc/recipes.markdown#recipes)\n* [browserify api reference](https://github.com/substack/node-browserify/blob/master/doc/methods.markdown#methods)\n* [browserify cdn](http://browserify.nodejitsu.com/)\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install -g browserify\n```\n\ntest\n====\n\nTo run the node tests with tap, do:\n\n```\nnpm test\n```\n\nTo run the [testling](http://testling.com) tests,\ncreate a [browserling](http://browserling.com) account then:\n\n```\ncd testling\n./test.sh\n```\n",
  "readmeFilename": "README.markdown",
  "_id": "browserify@1.17.3",
  "dist": {
    "shasum": "a86d1ad2e255bfa440bf98354c0cfdb80682e515"
  },
  "_from": "browserify@1.17.3",
  "_resolved": "https://registry.npmjs.org/browserify/-/browserify-1.17.3.tgz"
}
