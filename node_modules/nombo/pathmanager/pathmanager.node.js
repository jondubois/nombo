var path = require('path');

var PathManager = new (function() {
	var self = this;
	var _frameworkDirPath = null;
	var _frameworkDirRegex = null;
	var _frameworkURL = null;
	var _frameworkURLRegex = null;
	var _appDirPath = null;
	var _appDirRegex = null;
	var _appURL = null;
	var _multipleSlashesRegex = /(\/|\\)+/g;
	var _trailingSlashRegex = /\/$/;
	var _queryRegex = /[?].*/;
	
	var _frameworkModulesDirPath = null;
	var _frameworkSubModuleDirPath = null;
	
	self.toUnixSep = function(filePath) {
		return filePath.replace(/\\/g, '/');
	}
	
	var escapeRegExp = function(str) {
		return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
	}
	
	self.setBaseURL = function(appURL) {
		_appURL = appURL;
	}
	
	self.init = function(frameworkURL, frameworkDirPath, appDirPath, appURL) {
		_frameworkDirPath = self.toUnixSep(frameworkDirPath);
		_frameworkURL = frameworkURL;
		
		_frameworkModulesDirPath = _frameworkDirPath.replace(/node_modules\/[^\/]*\/?$/, '') + '/node_modules/';
		_frameworkSubModuleDirPath = (_frameworkDirPath + '/node_modules/').replace(_multipleSlashesRegex, '/');
		
		var simpleFrameworkURL = escapeRegExp(_frameworkURL.replace(_trailingSlashRegex, ''));
		_frameworkURLRegex = new RegExp('^' + simpleFrameworkURL + '(\/|$)');
		
		_frameworkDirRegex = new RegExp('^' + escapeRegExp(_frameworkDirPath));
		_appDirPath = self.toUnixSep(appDirPath);
		_appDirRegex = new RegExp('^' + escapeRegExp(_appDirPath) + '\/?');
		self.setBaseURL(appURL);
	}
	
	self.getFrameworkPath = function() {
		return _frameworkDirPath;
	}
	
	self.getAppPath = function() {
		return _appDirPath;
	}
	
	self.urlToPath = function(url) {
		url = url.replace(_queryRegex, '');
		var filePath;
		if(_frameworkURLRegex.test(url)) {
			filePath = url.replace(_frameworkURLRegex, _frameworkDirPath + '/');
			filePath = filePath.replace(_frameworkSubModuleDirPath, _frameworkModulesDirPath);
		} else {
			filePath = _appDirPath + url;
		}
		return path.normalize(filePath);
	}
	
	self.pathToURL = function(filePath) {
		filePath = self.toUnixSep(filePath);
		if(_appDirRegex.test(filePath)) {
			return filePath.replace(_appDirRegex, _appURL);
		} else if(_frameworkDirRegex.test(filePath)) {
			return self.toUnixSep(path.normalize(_frameworkURL + filePath.replace(_frameworkDirRegex, '')));
		}
		return filePath;
	}
})();

module.exports = PathManager;