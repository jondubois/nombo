var engine = require('engine.io');
var EventEmitter = require('events').EventEmitter;
var Socket = engine.Socket;
var json = require('./json').JSON;

module.exports = ClusterSocket;

function ClusterSocket(id, server, transport, namespace) {
	this._internalEvents = {
		'open': 1,
		'packet': 1,
		'heartbeat': 1,
		'data': 1,
		'message': 1,
		'upgrade': 1,
		'close': 1,
		'packetCreate': 1,
		'flush': 1,
		'drain': 1
	};
	
	Socket.call(this, id, server, transport);
	
	var self = this;
	this.namespace = namespace || '__';
	
	Socket.prototype.on.call(this, 'message', function (message) {
		var e = json.parse(message);
		var eventName = e.ns + '.' + e.event;
		EventEmitter.prototype.emit.call(self, eventName, e.data);
	});
};

ClusterSocket.prototype = Object.create(Socket.prototype);

ClusterSocket.prototype.ns = function (namespace) {
	return new ClusterSocket(this.id, this.server, this.transport, namespace);
};

ClusterSocket.prototype.emit = function (event, data) {
	if (this._internalEvents[event] == null) {
		var eventObject = {
			ns: this.namespace,
			event: event
		};
		if (data !== undefined) {
			eventObject.data = data;
		}
		Socket.prototype.send.call(this, json.stringify(eventObject));
	} else {
		EventEmitter.prototype.emit.apply(this, arguments);
	}
};

ClusterSocket.prototype.on = function (event, listener) {
	if (this._internalEvents[event] == null) {
		var eventName = this.namespace + '.' + event;
		EventEmitter.prototype.on.call(this, eventName, listener);
	} else {
		EventEmitter.prototype.on.apply(this, arguments);
	}
};