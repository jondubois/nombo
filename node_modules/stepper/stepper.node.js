var domain = require('domain');
var EventEmitter = require('events').EventEmitter;

var RunThread = function (settings) {
	var self = this;
	
	self._errorDomain = domain.create();
	self._errorDomain.on('error', function (err) {
		self.emit('error', err);
	});
	
	self._c = 0;
	
	self._context = settings.context;
	self._functions = (settings.functions instanceof Array) ? settings.functions : [];
	self._chain = settings.chain;
	
	self._startArgs = [];
	self._tail = settings.tail;
	self._validator = settings.validator;
	
	self.getLength = function () {
		return self._functions.length;
	};
	
	self.run = self._errorDomain.bind(function () {
		self._c = 0;
		
		var i;
		self._startArgs = [];
		var len = arguments.length;
		
		for (i=0; i<len; i++) {
			self._startArgs.push(arguments[i]);
		}
		
		if (!self._validator || self._validator.apply(self._context, self._startArgs)) {
			self._next.apply(self._context, self._startArgs);
		}
	});
	
	self._next = self._errorDomain.bind(function () {
		var args;
		if (self._chain) {
			args = [];
			var i;
			var len = arguments.length;
			
			for (i=0; i<len; i++) {
				args.push(arguments[i]);
			}
		} else {
			args = self._startArgs.concat();
		}
		args.push(self._next);
		
		if (!self._chain || !self._validator || self._validator.apply(self._context, arguments)) {
			if (self._c < self._functions.length) {
				self._functions[self._c++].apply(self._context, args);
			} else if (self._c++ == self._functions.length && self._tail) {
				if (self._chain) {
					if (self._tail instanceof Stepper) {
						self._tail.run.apply(self._context, arguments);
					} else {
						self._tail.apply(self._context, args);
					}
				} else {
					if (self._tail instanceof Stepper) {
						self._tail.run.apply(self._context, self._startArgs);
					} else {
						self._tail.apply(self._context, self._startArgs);
					}
				}
			}
		}
	});
};

RunThread.prototype = Object.create(EventEmitter.prototype);

var Stepper = function (options) {
	var self = this;
	
	self._dispatchError = function (err) {
		self.emit('error', err);
	};
	
	self._errorDomain = domain.create();
	self._errorDomain.on('error', self._dispatchError);
	
	self._c = 0;
	self._functions = (options.functions instanceof Array) ? options.functions : [];
	self._chain = options.chain;
	self._context = options.context;
	self._startArgs = [];
	self._tail = null;
	self._validator = null;
	
	self.addFunction = function (func) {
		self._functions.push(func);
	};
	
	self.setTail = function (tail) {
		self._tail = tail;
	};
	
	self.setValidator = function (func) {
		self._validator = func;
	};
	
	self.getLength = function () {
		return self._functions.length;
	};
	
	self.remove = function (func) {
		var newList = [];
		var i;
		var len = self._functions.length;
		for (i=0; i<len; i++) {
			if (self._functions[i] != func) {
				newList.push(self._functions[i]);
			}
		}
		self._functions = newList;
	};
	
	self.setFunctions = function (functions) {
		self._functions = (functions instanceof Array) ? functions : [];
	};
	
	self.setContext = function (context) {
		self._context = context;
	};
	
	self.chain = function (bool) {
		if (bool === undefined) {
			return self._chain;
		}
		self._chain = bool;
	};
	
	self.run = function () {
		var threadDomain = domain.create();
		threadDomain.on('error', self._dispatchError);
		
		var settings = {
			context: self._context,
			functions: self._functions,
			chain: self._chain,
			tail: self._tail,
			validator: self._validator
		};
		var rt = new RunThread(settings);
		threadDomain.add(rt);
		rt.run.apply(rt, arguments);
	};
}

Stepper.prototype = Object.create(EventEmitter.prototype);

module.exports.create = function (options) {
	return new Stepper(options);
};
