var fs = require('fs');
var path = require('path');
var pathManager = require('nombo/pathmanager');
var wrench = require('wrench');
var uglify = require("uglify-js");

var ScriptManager = function() {
	var self = this;
	
	self._extRegex = /[.][^.]*$/;
	self._frameworkURL = null;
	self._moduleURLRegex = null;
	self._mainScriptURL = null;
	self._mangleArguments = false;
	
	self.setBaseURL = function(appURL) {
		self._moduleURLRegex = new RegExp('^(' + self._frameworkURL + 'client\/|' + appURL + '|\/)?scripts\/');
	}
	
	self.init = function(frameworkURL, appURL, mangleArguments) {
		self._frameworkURL = frameworkURL;
		self._mainScriptURL = '/scripts/index.js';
		self._mangleArguments = mangleArguments;
		self.setBaseURL(appURL);
	}
	
	self.getExtension = function(filePath) {
		var ext = filePath.match(self._extRegex);
		ext = ext ? ext[0] : '';
		return ext;
	}
	
	self.isJSModule = function(url) {
		return self._moduleURLRegex.test(url) && url != self._mainScriptURL;
	}
	
	self.moduleWrap = function(moduleName, code) {
		return "(function(exports) { var module = {exports: exports};\n" + code + "\n})($loader._modules['" + moduleName + "']);";
	}
	
	self.minify = function(code) {
		var options = {
			fromString: true,
			mangle: self._mangleArguments
		};
		
		return uglify.minify(code, options).code;
	}
	
	self.minifyScripts = function(urls, excludeURLs) {
		var i, j, url, dir, files, filePath, curFile, curFileURL, data, ext, ugly, stat;
		var excludeURLMap = {};
		var minifiedMap = {};
		for(i in excludeURLs) {
			excludeURLMap[path.normalize(excludeURLs[i])] = true;
		}
		for(i in urls) {
			url = urls[i];
			filePath = pathManager.urlToPath(url);
			stat = fs.statSync(filePath);
			
			if(stat.isDirectory()) {
				files = wrench.readdirSyncRecursive(filePath);
				
				for(j in files) {
					curFile = filePath + files[j];
					
					if(!excludeURLMap.hasOwnProperty(path.normalize(curFile))) {
						curFileURL = url + files[j];
						ext = curFile.match(self._extRegex);
						ext = ext ? ext[0] : '';
						
						if(ext == '.js') {
							data = fs.readFileSync(curFile);
							if(self.isJSModule(curFileURL)) {
								data = self.moduleWrap(curFileURL, data);
							}
							minifiedMap[curFileURL] = self.minify(data.toString());
						}
					}
				}
			} else if(stat.isFile() && !excludeURLMap.hasOwnProperty(path.normalize(filePath))) {
				data = fs.readFileSync(filePath);
				if(self.isJSModule(url)) {
					data = self.moduleWrap(url, data);
				}
				minifiedMap[url] = self.minify(data.toString());
			}
		}
		
		return minifiedMap;
	}
}

module.exports = new ScriptManager();
