var async = require('async');

var ClientCluster = function (clients) {
	var self = this;
	
	var client = clients[0];
	var activeClients = clients;
	
	var i, method;
	var clientInterface = client.getInterface();
	var clientUtils = client.getUtils();
	
	for (i in clientInterface) {
		(function (method) {
			self[method] = function () {
				var lastArg = arguments[arguments.length - 1];
				var results = [];
				
				if (lastArg instanceof Function) {
					if (activeClients.length < 2) {
						activeClients[0][method].apply(activeClients[0], arguments);
					} else {
						var result;
						var tasks = [];
						var args = Array.prototype.slice.call(arguments, 0, -1);
						var cb = lastArg;
						
						for (var i in activeClients) {
							tasks.push(function (callback) {						
								result = activeClients[i][method].apply(activeClients[i], args.concat(callback))
								results.push(result);
							});
						}
						async.parallel(tasks, cb);
					}
				} else {
					for (var i in activeClients) {
						result = activeClients[i][method].apply(activeClients[i], arguments)
						results.push(result);
					}
				}
				return results;
			}
		})(clientInterface[i]);
	}
	
	for (i in clientUtils) {
		method = clientUtils[i];
		this[method] = client[method].bind(client);
	}
	
	this.map = function (clientIndices) {
		if (!(clientIndices instanceof Array)) {
			clientIndices = [clientIndices];
		}
		activeClients = [];
		for (var i in clientIndices) {
			activeClients.push(clients[clientIndices[i]]);
		}
	};
	
	this.getClientCount = function () {
		return clients.length;
	};
	
	this.getActiveClientCount = function () {
		return activeClients.length;
	};
};

module.exports.ClientCluster = ClientCluster;