var http = require('http');
var httpProxy = require('http-proxy');
var url = require('url');

var proxy = new httpProxy.RoutingProxy();

module.exports = LoadBalancer;

function LoadBalancer(options) {
	this.protocol = options.protocol || 'http';
	this.protocolOptions = options.protocolOptions;
	this.sourcePort = options.sourcePort;
	this.destPorts = options.destPorts;
	this._destRegex = /^([^_]*)_([^_]*)_/;
	
	if (this.protocol == 'http') {
		this.server = http.createServer(this.proxy.bind(this));
	} else if (this.protocol == 'https') {
		if(this.protocolOptions) {
			this.server = https.createServer(this.protocolOptions, this.proxy.bind(this));
		} else {
			throw new Error("The protocolOptions option must be set when https is used");
		}
	} else {
		throw new Error("The " + this.protocol + " protocol is not supported");
	}
	
	this.server.listen(this.sourcePort)
};

LoadBalancer.prototype.setDestPorts = function (ports) {
	this.destPorts = ports;
};

LoadBalancer.prototype._parseDest = function (req) {
	var query = url.parse(req.url, true).query;
	
	if (!query || !query.sid) {
		return null;
	}
	
	var result = query.sid.match(this._destRegex);
	
	if (!result) {
		return null;
	}
	
	var dest = {
		host: result[1] || 'localhost',
		port: parseInt(result[2]) || 8000
	};
	
	return dest;
};

LoadBalancer.prototype._randomPort = function() {
	var rand = Math.floor(Math.random() * this.destPorts.length);
	return this.destPorts[rand];
};

LoadBalancer.prototype.proxy = function (req, res) {
	var dest = this._parseDest(req);
	
	if (!dest) {
		dest = {
			host: 'localhost',
			port: this._randomPort()
		};
	}
	
	proxy.proxyRequest(req, res, dest);
};