{
  "name": "watchr",
  "version": "2.3.9",
  "description": "Better file system watching for Node.js",
  "homepage": "https://github.com/bevry/watchr",
  "keywords": [
    "watching",
    "watch",
    "fswatcher",
    "watchfile",
    "fs"
  ],
  "author": {
    "name": "Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "http://balupton.com"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "http://balupton.com"
    },
    {
      "name": "Casey Foster",
      "url": "https://github.com/caseywebdev"
    },
    {
      "name": "Robson Roberto Souza Peixoto",
      "email": "robsonpeixoto@gmail.com",
      "url": "https://github.com/robsonpeixoto"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/watchr/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/watchr.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {
    "bal-util": "~1.16.11"
  },
  "devDependencies": {
    "coffee-script": "~1.6.1",
    "joe": "~1.1.1"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "bin": {
    "watchr": "./bin/watchr"
  },
  "scripts": {
    "test": "node ./out/test/everything.test.js --joe-reporter=console"
  },
  "main": "./out/lib/watchr",
  "readme": "## Watchr: better file system watching for Node.js [![Build Status](https://secure.travis-ci.org/bevry/watchr.png?branch=master)](http://travis-ci.org/bevry/watchr)\n\nWatchr provides a normalised API the file watching APIs of different node versions, nested/recursive file and directory watching, and accurate detailed events for file/directory creations, updates, and deletions.\n\nYou install it via `npm install watchr` and use it via `require('watchr').watch(config)`. Available configuration options are:\n\n- `path` a single path to watch\n- `paths` an array of paths to watch\n- `listener` a single change listener to fire when a change occurs\n- `listeners` an array of listeners to fire when a change occurs, overloaded to accept the following values:\n\t- `changeListener` a single change listener\n\t- `[changeListener]` an array of change listeners\n\t- `{eventName:eventListener}` an object keyed with the event names and valued with a single event listener\n\t- `{eventName:[eventListener]}` an object keyed with the event names and valued with an array of event listeners\n- `next` (optional, defaults to `null`) a completion callback to fire once the watchers have been setup, arguments are:\n\t- when using the `path` configuration option: `err, watcherInstance`\n\t- when using the `paths` configuration option: `err, [watcherInstance,...]` \n- `stat` (optional, defaults to `null`) a file stat object to use for the path, instead of fetching a new one\n- `interval` (optional, defaults to `100`) for systems that poll to detect file changes, how often should it poll in millseconds\n- `persistent` (optional, defaults to `true`) whether or not we should keep the node process alive for as long as files are still being watched\n- `duplicateDelay` (optional, defaults to `1000`) sometimes events will fire really fast, this delay is set in place so we don't fire the same event within the timespan. Set to falsey to perform no duplicate detection.\n- `preferredMethods` (optional, defaults to `['watch','watchFile']`) which order should we prefer our watching methods to be tried?\n- `ignorePaths` (optional, defaults to `false`) an array of full paths to ignore\n- `ignoreHiddenFiles` (optional, defaults to `false`) whether or not to ignored files which filename starts with a `.`\n- `ignoreCommonPatterns` (optional, defaults to `true`) whether or not to ignore common undesirable file patterns (e.g. `.svn`, `.git`, `.DS_Store`, `thumbs.db`, etc)\n- `ignoreCustomPatterns` (optional, defaults to `null`) any custom ignore patterns that you would also like to ignore along with the common patterns\n\nThe following events are available to your via the listeners:\n\n- `log` for debugging, receives the arguments `logLevel ,args...`\n- `error` for gracefully listening to error events, receives the arguments `err`\n- `watching` for when watching of the path has completed, receives the arguments `err, isWatching`\n- `change` for listening to change events, receives the arguments `changeType, fullPath, currentStat, previousStat`, received arguments will be:\n\t- for updated files: `'update', fullPath, currentStat, previousStat`\n\t- for created files: `'create', fullPath, currentStat, null`\n\t- for deleted files: `'delete', fullPath, null, previousStat`\n\n\nTo wrap it all together, it would look like this:\n\n``` javascript\n// Require\nvar watchr = require('watchr');\n\n// Watch a directory or file\nconsole.log('Watch our paths');\nwatchr.watch({\n\tpaths: ['path1','path2','path3'],\n\tlisteners: {\n\t\tlog: function(logLevel){\n\t\t\tconsole.log('a log message occured:', arguments);\n\t\t},\n\t\terror: function(err){\n\t\t\tconsole.log('an error occured:', err);\n\t\t},\n\t\twatching: function(err,watcherInstance,isWatching){\n\t\t\tif (err) {\n\t\t\t\tconsole.log(\"watching the path \" + watcherInstance.path + \" failed with error\", err);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"watching the path \" + watcherInstance.path + \" completed\");\n\t\t\t}\n\t\t},\n\t\tchange: function(changeType,filePath,fileCurrentStat,filePreviousStat){\n\t\t\tconsole.log('a change event occured:',arguments);\n\t\t}\n\t},\n\tnext: function(err,watchers){\n\t\tif (err) {\n\t\t\treturn console.log(\"watching everything failed with error\", err);\n\t\t} else {\n\t\t\tconsole.log('watching everything completed', watchers);\n\t\t}\n\n\t\t// Close watchers after 60 seconds\n\t\tsetTimeout(function(){\n\t\t\tvar i;\n\t\t\tconsole.log('Stop watching our paths');\n\t\t\tfor ( i=0;  i<watchers.length; i++ ) {\n\t\t\t\twatchers[i].close();\n\t\t\t}\n\t\t},60*1000);\n\t}\n});\n```\n\nYou can test the above code snippet by running the following:\n\n```\nnpm install -g watchr\nwatchr\n```\n\n\n## Support\n\nSupport can be found in the [GitHub Issue Tracker](https://github.com/bevry/watchr/issues)\n\n\n## History\n\nYou can discover the history inside the [History.md](https://github.com/bevry/watchr/blob/master/History.md#files) file\n\n\n## License\n\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright &copy; 2012+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright &copy; 2011 [Benjamin Lupton](http://balupton.com)\n",
  "readmeFilename": "README.md",
  "_id": "watchr@2.3.9",
  "_from": "watchr@"
}
