var http = require('http');
var https = require('https');
var Receiver = require('./receiver').Receiver;

var SimpleSocketProxy = function (protocol) {
	this._protocol = protocol == 'https' ? https : http;
};

SimpleSocketProxy.prototype._getProto = function (req) {
	return req.isSpdy ? 'https' : (req.connection.pair ? 'https' : 'http');
};

SimpleSocketProxy.prototype.proxy = function (req, sourceSocket, dest) {
	sourceSocket.setTimeout(0);
	sourceSocket.setNoDelay(true);
	sourceSocket.setKeepAlive(true);
	
	var receiver = new Receiver();
		
	var onData, onEnd;

	sourceSocket.on('data', onData = function (data, encoding) {
		receiver.write(data, encoding);
	});
	sourceSocket.on('end', onEnd = function (data, encoding) {
		receiver.end(data, encoding);
		sourceSocket.removeListener('data', onData);
		sourceSocket.removeListener('end', onEnd);
	});
	
	var target = {};
	target.hostname = dest.host;
	target.port = dest.port;
	target.method = 'GET';
	target.path = req.url;
	target.headers = req.headers;
	
	if (target.headers['x-forwarded-for']) {
		var addressToAppend = "," + req.connection.remoteAddress || req.socket.remoteAddress;
		target.headers['x-forwarded-for'] += addressToAppend;
	} else {
		target.headers['x-forwarded-for'] = req.connection.remoteAddress || req.socket.remoteAddress;
	}
	if (target.headers['x-forwarded-port']) {
		var portToAppend = "," + req.connection.remotePort || req.socket.remotePort;
		target.headers['x-forwarded-port'] += portToAppend;
	} else {
		target.headers['x-forwarded-port'] = req.connection.remotePort || req.socket.remotePort;
	}
	if (target.headers['x-forwarded-proto']) {
		var protoToAppend = "," + this._getProto(req);
		target.headers['x-forwarded-proto'] += protoToAppend;
	} else {
		target.headers['x-forwarded-proto'] = this._getProto(req);
	}

	var targetRequest = this._protocol.request(target);
	targetRequest.end();
	
	targetRequest.on('upgrade', function (targetResponse, targetSocket, targetHead) {
		targetSocket.setTimeout(0);
		targetSocket.setNoDelay(true);
		targetSocket.setKeepAlive(true);
		
		var headers = [
			'HTTP/1.1 101 Switching Protocols'
		];
		for (var i in targetResponse.headers) {
			headers.push(i + ': ' + targetResponse.headers[i]);
		}
		sourceSocket.write(headers.concat(['', '']).join("\r\n"));
		
		receiver.consume({
			write: function (data, encoding) {
				targetSocket.write.apply(targetSocket, arguments);
			},
			end: function (data, encoding) {
				targetSocket.end.apply(targetSocket, arguments);
			}
		});
		
		targetSocket.on('data', function (data, encoding) {
			sourceSocket.write.apply(sourceSocket, arguments);
		});
		targetSocket.on('end', function (data, encoding) {
			sourceSocket.end.apply(sourceSocket, arguments);
		});
	});
};

module.exports.SimpleSocketProxy = SimpleSocketProxy;