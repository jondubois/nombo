var fs = require('fs'),
	path = require('path'),
	pathManager = require('nombo/pathmanager'),
	less = require('less'),
	wrench = require('wrench'),
	SmartCacheManager = require("nombo/smartcachemanager").SmartCacheManager,
	scriptManager = require('nombo/scriptmanager'),
	crypto = require('crypto'),
	async = require('async'),
	cache = require('nombo/cache');

var Preprocessor = new (function () {
	var self = this;
	
	self._options = {};
	self._cacheVersionManager = null;
	
	self.getOptions = function () {
		return self._options;
	};
	
	self.init = function (options) {
		self._options = options;
		
		if (self._options.release) {
			self._cacheVersionManager = new SmartCacheManager(self._options.cacheVersion);
		}
	};
	
	self._versionDeepCSSURLs = function (content) {
		if (self._options.release) {
			content = content.replace(/@import +["']([^"']+)["']/g, function (match, first) {
				return '@import "' + self._cacheVersionManager.setURLCacheVersion(first) + '"';
			});
			
			content = content.replace(/([^A-Za-z0-9]|^)url[(][ ]*["']?([^"')]*)["']?[ ]*[)]/g, function (match, first, second) {
				return first + 'url("' + self._cacheVersionManager.setURLCacheVersion(second) + '")';
			});
		}
		return content;
	};
	
	self.run = function (req, res, next) {
		var buffers = [];
		var ext = scriptManager.getExtension(req.rout.filePath);
		
		if (req.rout.buffer !== null || req.rout.error) {
			if (ext == '.js' && scriptManager.isJSModule(req.url)) {
				req.rout.buffer = new Buffer(scriptManager.moduleWrap(req.url, req.rout.buffer.toString()));
			}
			next();
		} else {
			var lastStream = req.rout.getLastStream();
			
			if ((ext == '.js' && scriptManager.isJSModule(req.url)) || ext == '.css' || ext == '.less') {
				lastStream.on('data', function (data) {
					buffers.push(data);
				});
				
				lastStream.on('end', function () {
					var data, buf;
					var resBuffer = Buffer.concat(buffers);
					
					if (ext == '.js') {
						data = scriptManager.moduleWrap(req.url, resBuffer.toString());
						buf = new Buffer(data);
						cache.set(cache.ENCODING_PLAIN, req.url, buf);
						req.rout.buffer = buf;
						next();
					} else if (ext == '.less') {
						data = self._versionDeepCSSURLs(resBuffer.toString());
						less.render(data, function (e, css) {
							buf = new Buffer(css);
							cache.set(cache.ENCODING_PLAIN, req.url, buf);
							req.rout.buffer = buf;
							next();
						});
					} else {
						data = self._versionDeepCSSURLs(resBuffer.toString());
						buf = new Buffer(data);
						cache.set(cache.ENCODING_PLAIN, req.url, buf);
						req.rout.buffer = buf;
						next();
					}
				});
			} else {
				lastStream.on('data', function (data) {
					buffers.push(data);
				});
				
				lastStream.on('end', function () {
					var data, buf;
					var resBuffer = Buffer.concat(buffers);
					
					cache.set(cache.ENCODING_PLAIN, req.url, resBuffer);
				});
				
				next();
			}
		}
	};
})();

module.exports = Preprocessor;
