{
  "name": "nub",
  "version": "0.0.0",
  "description": "Uniqueness functions",
  "main": "index.js",
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "expresso": "0.7.x"
  },
  "scripts": {
    "test": "expresso"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-nub.git"
  },
  "keywords": [
    "unique",
    "uniq",
    "uniqBy",
    "nub",
    "nubBy"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "nub\n===\n\nReturn all the unique elements of an array. You can specify your own uniqueness\ncomparison function with `nub.by` too.\n\nThese work like haskell's `nub` and `nubBy` functions in Data.List.\n\nmethods\n=======\n\nnub(xs)\n-------\n\nReturn a new array with all the uniqe elements in `xs`.\n\nUniqueness is calculated `===` style so the types matter.\n\nnub.by(xs, cmp)\n---------------\n\nUse `cmp(x,y)` function to compare elements instead of the default.\n`cmp` should return whether the two elements are equal as a boolean.\n",
  "readmeFilename": "README.markdown",
  "_id": "nub@0.0.0",
  "_from": "nub@~0.0.0"
}
