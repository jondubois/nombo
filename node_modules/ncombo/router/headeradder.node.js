var fs = require('fs'),
	path = require('path'),
	pathManager = require('ncombo/pathmanager'),
	mime = require('mime'),
	less = require('less'),
	wrench = require('wrench'),
	SmartCacheManager = require("ncombo/smartcachemanager").SmartCacheManager,
	scriptManager = require('ncombo/scriptmanager'),
	crypto = require('crypto'),
	cache = require('ncombo/cache');

var HeaderAdder = new (function() {
	var self = this;
	
	self._options = {
		cacheLife: 2592000000,
		cacheType: 'private'
	};
	
	self.getOptions = function() {
		return self._options;
	}
	
	self.init = function(options) {
		var i;
		for(i in options) {
			self._options[i] = options[i];
		}
	}
	
	self.run = function(req, res, next) {
		var mimeType, encoding;
		
		if(req.rout.mimeType) {
			mimeType = req.rout.mimeType;
		} else {
			mimeType = mime.lookup(req.rout.filePath);
		}
		
		if(req.rout.encoding) {
			encoding = req.rout.encoding;
			
			res.setHeader('Content-Encoding', encoding);
			cache.setHeader(encoding, req.url, 'Content-Encoding', encoding);
		} else {
			encoding = cache.ENCODING_PLAIN;
		}
		
		res.setHeader('Content-Type', mimeType);		
		cache.setHeader(encoding, req.url, 'Content-Type', mimeType);
		
		if(self._options.release && !req.rout.skipCache) {
			var now = new Date();
			var exp = new Date(now.getTime() + self._options.cacheLife).toUTCString();
			
			res.setHeader('Cache-Control', self._options.cacheType);
			res.setHeader('Pragma', self._options.cacheType);
			res.setHeader('Expires', exp);
			
			cache.setHeader(encoding, req.url, 'Cache-Control', self._options.cacheType);
			cache.setHeader(encoding, req.url, 'Pragma', self._options.cacheType);
			cache.setHeader(encoding, req.url, 'Expires', exp);
			
			next();
		} else {
			if(req.rout.buffer === null) {
				fs.stat(req.rout.filePath, function(err, stats) {
					var modifiedStamp = stats.mtime.toUTCString();
					var checksum = crypto.createHash('sha1');
					checksum.update(modifiedStamp);
					var version = checksum.digest('hex');
					
					res.setHeader('Last-Modified', modifiedStamp);
					res.setHeader('ETag', version);
					
					cache.setHeader(encoding, req.url, 'Last-Modified', modifiedStamp);
					cache.setHeader(encoding, req.url, 'ETag', version);
					
					next();
				});
			} else {
				if(cache.has(encoding, req.url)) {
					var modifiedStamp = cache.getTime(encoding, req.url).toUTCString();
					var checksum = crypto.createHash('sha1');
					checksum.update(modifiedStamp);
					var version = checksum.digest('hex');
					
					res.setHeader('Last-Modified', modifiedStamp);
					res.setHeader('ETag', version);
					
					cache.setHeader(encoding, req.url, 'Last-Modified', modifiedStamp);
					cache.setHeader(encoding, req.url, 'ETag', version);
				}
				next();
			}
		}
	}
})();

module.exports = HeaderAdder;
